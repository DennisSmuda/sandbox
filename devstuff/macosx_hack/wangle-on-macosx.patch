diff --git a/wangle/channel/FileRegion.cpp b/wangle/channel/FileRegion.cpp
index a8a6b0d..1a1d1f7 100644
--- a/wangle/channel/FileRegion.cpp
+++ b/wangle/channel/FileRegion.cpp
@@ -13,6 +13,44 @@
 using namespace folly;
 using namespace wangle;
 
+#ifdef __APPLE__
+#define SPLICE_F_NONBLOCK   (0x02)
+#define SPLICE_F_MORE       (0x04)
+static ssize_t splice(int fd_in, off_t *off_in, int fd_out, off_t *off_out,
+                      size_t len, unsigned int flags) {
+  ssize_t spliced = 0;
+  off_t rd_off = off_in ? *off_in : ::lseek(fd_in, 0, SEEK_CUR);
+  if (rd_off < 0) {
+    return -1;
+  }
+  off_t wr_off = off_out ? *off_out : ::lseek(fd_out, 0, SEEK_CUR);
+  if (wr_off < 0) {
+    return -1;
+  }
+  char buf[4096];
+  while (len > 0) {
+    ssize_t rd_cnt = ::pread(fd_in, buf, sizeof(buf), rd_off);
+    if (rd_cnt <= 0) {
+      break;
+    }
+    rd_off += rd_cnt;
+    ssize_t wr_cnt = ::pwrite(fd_out, buf, rd_cnt, wr_off);
+    if (wr_cnt <= 0) {
+      break;
+    }
+    wr_off += wr_cnt;
+    spliced += wr_cnt;
+  }
+  if (!off_in) {
+    ::lseek(fd_in, spliced, SEEK_CUR);
+  }
+  if (!off_out) {
+    ::lseek(fd_out, spliced, SEEK_CUR);
+  }
+  return spliced;
+}
+#endif
+
 namespace {
 
 struct FileRegionReadPool {};
diff --git a/wangle/concurrent/Codel.cpp b/wangle/concurrent/Codel.cpp
index 5decbc4..a260819 100644
--- a/wangle/concurrent/Codel.cpp
+++ b/wangle/concurrent/Codel.cpp
@@ -84,7 +84,7 @@ bool Codel::overloaded(std::chrono::nanoseconds delay) {
 int Codel::getLoad() {
   // it might be better to use the average delay instead of minDelay, but we'd
   // have to track it. aspiring bootcamper?
-  return std::min(100l, 100 * getMinDelay() / getSloughTimeout());
+  return std::min<int>(100, 100 * getMinDelay() / getSloughTimeout());
 }
 
 nanoseconds Codel::getMinDelay() {
