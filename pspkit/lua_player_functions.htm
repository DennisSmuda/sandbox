<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0047)http://wiki.ps2dev.org/psp:lua_player:functions -->
<HTML xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr"><HEAD><META http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <TITLE>psp:lua_player:functions [psDevWiki]</TITLE>
  

    <META name="generator" content="DokuWiki snapshot?">
  <LINK rel="start" href="http://wiki.ps2dev.org/">
  <LINK rel="contents" href="http://wiki.ps2dev.org/psp:lua_player:functions?do=index" title="">
  <LINK rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://wiki.ps2dev.org/feed.php">
  <LINK rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://wiki.ps2dev.org/feed.php?mode=list&ns=psp:lua_player">
  <LINK rel="alternate" type="text/html" title="Plain HTML" href="http://wiki.ps2dev.org/psp:lua_player:functions?do=export_html">
  <LINK rel="alternate" type="text/plain" title="Wiki Markup" href="http://wiki.ps2dev.org/psp:lua_player:functions?do=export_raw">
  <LINK rel="stylesheet" media="screen" type="text/css" href="./lua_player_functions_files/style.css">
  <META name="date" content="2008-05-15T00:07:13-0700">
  <META name="robots" content="index,follow">
  <SCRIPT language="javascript" type="text/javascript" charset="utf-8">
    var alertText   = 'Please enter the text you want to format.\nIt will be appended to the end of the document.'
    var notSavedYet = 'There are unsaved changes, that will be lost.\nReally continue?'
    var DOKU_BASE   = '/'
  </SCRIPT>
  <SCRIPT language="javascript" type="text/javascript" charset="utf-8" src="./lua_player_functions_files/script.js"></SCRIPT>
  <SCRIPT language="javascript" type="text/javascript" charset="utf-8" src="./lua_player_functions_files/tw-sack.js"></SCRIPT>
  <SCRIPT language="javascript" type="text/javascript" charset="utf-8" src="./lua_player_functions_files/ajax.js"></SCRIPT>

  <LINK rel="shortcut icon" href="http://wiki.ps2dev.org/lib/images/favicon.ico">
  <LINK rel="stylesheet" media="screen" type="text/css" href="./lua_player_functions_files/layout.css">
  <LINK rel="stylesheet" media="screen" type="text/css" href="./lua_player_functions_files/design.css">

  
  <LINK rel="stylesheet" media="print" type="text/css" href="./lua_player_functions_files/print.css">

  <!--[if gte IE 5]>
  <style type="text/css">
    /* that IE 5+ conditional comment makes this only visible in IE 5+ */
    /* IE bugfix for transparent PNGs */
    //DISABLED   img { behavior: url("/lib/scripts/pngbehavior.htc"); }
  </style>
  <![endif]-->

  </HEAD><BODY>
<DIV class="dokuwiki">
  
  <DIV class="stylehead">

    <DIV class="header">
      <DIV class="pagename">
        [[<A href="http://wiki.ps2dev.org/psp:lua_player:functions?do=backlink" onclick="return svchk()" onkeypress="return svchk()">psp:lua_player:functions</A>]]
      </DIV>
      <DIV class="logo">
        <A href="http://wiki.ps2dev.org/" onclick="return svchk()" onkeypress="return svchk()" name="top" accesskey="h" title="[ALT+H]">psDevWiki</A>      </DIV>
    </DIV>
  
    
    <DIV class="bar" id="bar_top">
      <DIV class="bar-left" id="bar_topleft">
        <FORM class="button" method="post" action="./lua_player_functions_files/lua_player_functions.htm" onsubmit="return svchk()"><INPUT type="hidden" name="do" value="edit"><INPUT type="hidden" name="rev" value=""><INPUT type="submit" value="Show pagesource" class="button" title="ALT+V" accesskey="v"></FORM>        <FORM class="button" method="get" action="./lua_player_functions_files/lua_player_functions.htm" onsubmit="return svchk()"><INPUT type="hidden" name="do" value="revisions"><INPUT type="submit" value="Old revisions" class="button" title="ALT+O" accesskey="o"></FORM>      </DIV>
  
      <DIV class="bar-right" id="bar_topright">
        <FORM class="button" method="get" action="http://wiki.ps2dev.org/" onsubmit="return svchk()"><INPUT type="hidden" name="do" value="recent"><INPUT type="submit" value="Recent changes" class="button" title="ALT+R" accesskey="r"></FORM>        <FORM action="http://wiki.ps2dev.org/" accept-charset="utf-8" class="search" name="search" onsubmit="return svchk()"><INPUT type="hidden" name="do" value="search"><INPUT type="text" id="qsearch_in" accesskey="f" name="id" class="edit" onkeyup="ajax_qsearch.call(&#39;qsearch_in&#39;,&#39;qsearch_out&#39;)"><INPUT type="submit" value="Search" class="button"><DIV id="qsearch_out" class="ajax_qsearch" onclick="this.style.display=&#39;none&#39;"></DIV></FORM>&nbsp;
      </DIV>
    </DIV>

        <DIV class="breadcrumbs">
      Trace: <SPAN class="bcsep">»</SPAN> <A href="http://wiki.ps2dev.org/ps2:lua_player" onclick="return svchk()" onkeypress="return svchk()" class="breadcrumbs" title="ps2:lua_player">lua_player</A> <SPAN class="bcsep">»</SPAN> <SPAN class="curid"><A href="./lua_player_functions_files/lua_player_functions.htm" onclick="return svchk()" onkeypress="return svchk()" class="breadcrumbs" title="psp:lua_player:functions">functions</A></SPAN>          </DIV>
    
  </DIV>
  
  
  <DIV class="page">
    <!-- wikipage start -->
    <DIV class="toc">
<DIV class="tocheader"><SCRIPT type="text/javascript">showTocToggle('<img src="/lib/images/arrow_down.gif">','<img src="/lib/images/arrow_up.gif">')</SCRIPT><DIV class="toctoggle"><A href="javascript:toggleToc()" class="toc"><SPAN id="showlink" style="display:none;"><IMG src="./lua_player_functions_files/arrow_down.gif"></SPAN><SPAN id="hidelink"><IMG src="./lua_player_functions_files/arrow_up.gif"></SPAN></A></DIV>
Table of Contents</DIV>
<DIV id="tocinside">
<UL class="toc">
<LI class="level1"><SPAN class="li"><A href="http://wiki.ps2dev.org/psp:lua_player:functions#lua_player_functions" class="toc"> Lua Player <SPAN class="search_hit">function</SPAN>s </A></SPAN><UL class="toc">
<LI class="level2"><SPAN class="li"><A href="http://wiki.ps2dev.org/psp:lua_player:functions#graphics" class="toc"> Graphics </A></SPAN></LI>
<LI class="level2"><SPAN class="li"><A href="http://wiki.ps2dev.org/psp:lua_player:functions#3d_gu_mapping" class="toc"> 3D GU mapping </A></SPAN></LI>
<LI class="level2"><SPAN class="li"><A href="http://wiki.ps2dev.org/psp:lua_player:functions#controls" class="toc"> Controls </A></SPAN></LI>
<LI class="level2"><SPAN class="li"><A href="http://wiki.ps2dev.org/psp:lua_player:functions#millisecond_timer" class="toc"> Millisecond Timer </A></SPAN></LI>
<LI class="level2"><SPAN class="li"><A href="http://wiki.ps2dev.org/psp:lua_player:functions#system" class="toc"> System </A></SPAN></LI>
<LI class="level2"><SPAN class="li"><A href="http://wiki.ps2dev.org/psp:lua_player:functions#sound_and_music" class="toc"> Sound and music </A></SPAN></LI>
<LI class="level2"><SPAN class="li"><A href="http://wiki.ps2dev.org/psp:lua_player:functions#wlan" class="toc"> WLAN </A></SPAN></LI>
<LI class="level2"><SPAN class="li"><A href="http://wiki.ps2dev.org/psp:lua_player:functions#netlib_2.0" class="toc"> Netlib 2.0 </A></SPAN></LI>
<LI class="level2"><SPAN class="li"><A href="http://wiki.ps2dev.org/psp:lua_player:functions#notes" class="toc"> Notes </A></SPAN></LI>
</UL>
</LI>
</UL>
</DIV>
</DIV>

<A name="lua_player_functions"></A><H1> Lua Player <SPAN class="search_hit">function</SPAN>s </H1>
<DIV class="level1">

</DIV>

<A name="graphics"></A><H2> Graphics </H2>
<DIV class="level2">
<PRE class="code">Font Font.load<SPAN class="br0">(</SPAN>filename<SPAN class="br0">)</SPAN></PRE>
<P>
Loads a true type font.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">Font Font.createMonoSpaced<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Creates an instance of the built-in mono-spaced font.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">Font Font.createProportional<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Creates an instance of the built-in proportional font.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">Font Font:setCharSize<SPAN class="br0">(</SPAN>number width, number height, number dpiX, number dpiY<SPAN class="br0">)</SPAN></PRE>
<P>
Changes the size of the current font to the specified point size height and width (if width is 0, it will be calculated proportional to the height for every character). dpiX and dpiY is the resolution of the display (see the Freetype documentation for details).
</P>
<HR noshade="noshade" size="1">
<PRE class="code">Font Font:setPixelSizes<SPAN class="br0">(</SPAN>number width, number height<SPAN class="br0">)</SPAN></PRE>
<P>
Changes the size of the current font to the specified pixel size height and width (if width is 0, it will be calculated proportional to the height for every character). (see the Freetype documentation for details).
</P>
<HR noshade="noshade" size="1">
<PRE class="code">width, height Font:getTextSize<SPAN class="br0">(</SPAN><SPAN class="kw1">string</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Returns the width and height, which will be used, if the specified text is drawn with this font and the current font size.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">Image Image.createEmpty<SPAN class="br0">(</SPAN>width, height<SPAN class="br0">)</SPAN></PRE>
<P>
Creates an empty image, initially cleared. Max width and height is 512.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">Image Image.load<SPAN class="br0">(</SPAN> filename <SPAN class="br0">)</SPAN></PRE>
<P>
Loads an image. Currently <ACRONYM title="Joint Photographics Experts Group">JPEG</ACRONYM> and <ACRONYM title="Portable Network Graphics">PNG</ACRONYM> files are supported.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">Image Image.loadFromMemory<SPAN class="br0">(</SPAN> data <SPAN class="br0">)</SPAN></PRE>
<P>
Loads an image from memory (data is a Lua string). Currently <ACRONYM title="Joint Photographics Experts Group">JPEG</ACRONYM> and <ACRONYM title="Portable Network Graphics">PNG</ACRONYM> files are supported. Sample: 
</P>
<PRE class="code">     jpegFile = <SPAN class="kw1">io</SPAN>.open<SPAN class="br0">(</SPAN><SPAN class="st0">"test.jpg"</SPAN>, <SPAN class="st0">"rb"</SPAN><SPAN class="br0">)</SPAN>
     data = jpegFile:<SPAN class="kw1">read</SPAN><SPAN class="br0">(</SPAN><SPAN class="st0">"*a"</SPAN><SPAN class="br0">)</SPAN>
     jpegFile:close<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN>
     image = Image.loadFromMemory<SPAN class="br0">(</SPAN>data<SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> image:blit<SPAN class="br0">(</SPAN>x, y, Image source, <SPAN class="br0">[</SPAN>sourcex, sourcey, width, height<SPAN class="br0">]</SPAN>, <SPAN class="br0">[</SPAN>alpha = <SPAN class="kw1">true</SPAN><SPAN class="br0">]</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Paints the image, which is specified as “source” to the image on which this <SPAN class="search_hit">function</SPAN> is called on (or to the double buffered screen, when using the “screen:blit(...)” variable, which is a special image). “sourcex” and “sourcey” is the position in the source image, from where a rectangle of the size width/height is copied.
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> image:clear<SPAN class="br0">(</SPAN><SPAN class="br0">[</SPAN>color = transparent-black<SPAN class="br0">]</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Sets all pixels of an image to the specified color.
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> image:fillRect<SPAN class="br0">(</SPAN>x, y, width, height, <SPAN class="br0">[</SPAN>color = transparent-black<SPAN class="br0">]</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Draws a filled rectangle.
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> image:drawLine<SPAN class="br0">(</SPAN>x0, y0, x1, y1, <SPAN class="br0">[</SPAN>color = black<SPAN class="br0">]</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Draws a line. TODO: Clipping needs to be enhanced.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">Color image:pixel<SPAN class="br0">(</SPAN>x, y<SPAN class="br0">)</SPAN> <SPAN class="co1">--get </SPAN>
&nbsp;</PRE>
<P>
Gets the color of a pixel. See for example this code to get the color of an pixel and assert the value of all color components:
</P>
<PRE class="code">image = Image.createEmpty<SPAN class="br0">(</SPAN><SPAN class="nu0">1</SPAN>, <SPAN class="nu0">1</SPAN><SPAN class="br0">)</SPAN>
color = image:pixel<SPAN class="br0">(</SPAN><SPAN class="nu0">0</SPAN>, <SPAN class="nu0">0</SPAN><SPAN class="br0">)</SPAN>
colors = color:colors<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN>
<SPAN class="kw1">assert</SPAN><SPAN class="br0">(</SPAN>colors.r == <SPAN class="nu0">0</SPAN><SPAN class="br0">)</SPAN>
<SPAN class="kw1">assert</SPAN><SPAN class="br0">(</SPAN>colors.g == <SPAN class="nu0">0</SPAN><SPAN class="br0">)</SPAN>
<SPAN class="kw1">assert</SPAN><SPAN class="br0">(</SPAN>colors.b == <SPAN class="nu0">0</SPAN><SPAN class="br0">)</SPAN>
<SPAN class="kw1">assert</SPAN><SPAN class="br0">(</SPAN>colors.a == <SPAN class="nu0">0</SPAN><SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> image:pixel<SPAN class="br0">(</SPAN>x, y, Color<SPAN class="br0">)</SPAN> <SPAN class="co1">--set </SPAN>
&nbsp;</PRE>
<P>
Sets the color of a pixel.
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> image:<SPAN class="kw1">print</SPAN><SPAN class="br0">(</SPAN>x, y, text, <SPAN class="br0">[</SPAN>color = black<SPAN class="br0">]</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Prints some text with a predefined fixed width font with 8×8 pixels per character.
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> image:fontPrint<SPAN class="br0">(</SPAN>font, x, y, text, <SPAN class="br0">[</SPAN>color = black<SPAN class="br0">]</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Prints some text with the specified true type font.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">Number image:width<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Returns the width of an image.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">Number image:height<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Returns the height of an image.
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> image:save<SPAN class="br0">(</SPAN> filename <SPAN class="br0">)</SPAN></PRE>
<P>
Saves an image to memory stick. Currently <ACRONYM title="Joint Photographics Experts Group">JPEG</ACRONYM> and <ACRONYM title="Portable Network Graphics">PNG</ACRONYM> files are supported.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">global Image screen</PRE>
<P>
The special double buffered screen object, which has all methods of an image and some more, see below.
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> screen.flip<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN> <SPAN class="co1">-- note the small s; this is a <SPAN class="search_hit">function</SPAN> of the screen </SPAN>
&nbsp;</PRE>
<P>
Flips the offscreen and onscreen screen.
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> screen.waitVblankStart<SPAN class="br0">(</SPAN><SPAN class="br0">[</SPAN>count<SPAN class="br0">]</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Waits until vertical retrace starts.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">Color Color.new<SPAN class="br0">(</SPAN>r, g, b, <SPAN class="br0">[</SPAN>a=<SPAN class="nu0">255</SPAN><SPAN class="br0">]</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Creates a new color object with the specified RGBA values.
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">table</SPAN><SPAN class="br0">[</SPAN>r,g,b,a<SPAN class="br0">]</SPAN> color:colors<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Returns the RGBA values of a color object.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">Bool <SPAN class="br0">(</SPAN>Color a == Color b<SPAN class="br0">)</SPAN></PRE>
<P>
Color objects are equal, iff all RGBA components are equal.
</P>
<HR noshade="noshade" size="1">

</DIV>

<A name="3d_gu_mapping"></A><H2> 3D GU mapping </H2>
<DIV class="level2">

<P>
 Note: The 3D <ACRONYM title="Application Programming Interface">API</ACRONYM> might change in future.
</P>

<P>
Gu.start3d() saves the current GE state for the normal 2D operations. Call this <SPAN class="search_hit">function</SPAN> first and then draw your scene. You can use the following <SPAN class="search_hit">function</SPAN>s:
</P>

<P>
Gu.clearColor, Gu.clearDepth, Gu.clear, Gum.matrixMode, Gum.loadIdentity, Gum.perspective, Gum.translate, Gum.rotateXYZ, Gu.texImage, Gu.texFunc, Gu.texEnvColor, Gu.texFilter, Gu.texScale, Gu.texOffset, Gu.ambientColor, Gu.enable, Gu.disable, Gu.blendFunc, Gu.light, Gu.lightAtt, Gu.lightColor, Gu.lightMode, Gu.lightSpot and Gum.drawArray. See the PSPSDK for documenation about the parameters, for example the <A href="http://svn.ps2dev.org/filedetails.php?repname=psp&path=%2Ftrunk%2Fpspsdk%2Fsrc%2Fgu%2Fpspgu.h&rev=0&sc=0" class="urlextern" target="_blank" title="http://svn.ps2dev.org/filedetails.php?repname=psp&amp;path=%2Ftrunk%2Fpspsdk%2Fsrc%2Fgu%2Fpspgu.h&amp;rev=0&amp;sc=0" onclick="return svchk()" onkeypress="return svchk()" rel="nofollow">pspgu.h</A>. If there is a ScePspFVector3, write 3 numbers instead one parameter (this will be changed in a later version). Whereever a color is expected, use a Color object. For textures use an Image object.
</P>

<P>
Gum.drawArray is something special: It has just 3 parameters: “prim”, “vtype” and a table. With “prim” you specify which primitive should be used, for example Gu.TRIANGLES. “vtype” specifies the vertex format and the transformation operation. For example “Gu.COLOR_8888|Gu.VERTEX_32BITF|Gu.TRANSFORM_3D” means, that your vertices has a color component and a 3 vertex coordinate components and is transformed before passed to the rasterizer. The table is then a list of vertex entries, where each vertex entry has the form (color, x, y, z). If you have specified GU_TEXTURE_32BITF, too, then one entry looks like this: (textureU, textureV, color, x, y, z). The order of the entries is defined in pspgu.h: textureU, textureV, color, normalX, normalY, normalZ, vertexX, vertexY, vertexZ. Indices, weights and multiple vertices per entry (which you’ll need for the morphing feature) currently are not supported.
</P>

<P>
After drawing anything, call Gu.end3d(), which flushs the display buffer and draws all pending 3D graphics and restores the 2D GE state. Don’t forget to call a screen:clear() before fullscreen 2D operations, because otherwise the z-buffer is not cleared and the blitting <SPAN class="search_hit">function</SPAN>s may not work correctly. If you need to blit 2D images in 3D mode, use textures and triangles.
</P>

<P>
See the 3D Cube example in the Applications folder of the distribution of Lua Player to see how to use the 3D <SPAN class="search_hit">function</SPAN>s and take a look at <A href="http://svn.ps2dev.org/listing.php?repname=psp&path=%2Ftrunk%2Fpspsdk%2Fsrc%2Fsamples%2Fgu%2F&rev=0&sc=0" class="urlextern" target="_blank" title="http://svn.ps2dev.org/listing.php?repname=psp&amp;path=%2Ftrunk%2Fpspsdk%2Fsrc%2Fsamples%2Fgu%2F&amp;rev=0&amp;sc=0" onclick="return svchk()" onkeypress="return svchk()" rel="nofollow">the GU example in the PSPSDK </A> how to use all the other <SPAN class="search_hit">function</SPAN>s. Most of the time you can copy and paste the examples and just remove all those C fussinesses like “.0f”, semicolon, malloc etc. <IMG src="./lua_player_functions_files/icon_smile.gif" align="middle" alt=":-)">
</P>
<HR noshade="noshade" size="1">

</DIV>

<A name="controls"></A><H2> Controls </H2>
<DIV class="level2">
<PRE class="code">Controls Controls.read<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE><PRE class="code">Bool controls:select<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN>
Bool controls:start<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN>
Bool controls:up<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN>
Bool controls:right<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN>
Bool controls:down<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN>
Bool controls:left<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN>
Bool controls:l<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN>
Bool controls:r<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN>
Bool controls:triangle<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN>
Bool controls:circle<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN>
Bool controls:cross<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN>
Bool controls:square<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN>
Bool controls:home<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN>
Bool controls:hold<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN>
Bool controls:note<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">
<PRE class="code">Number controls:analogX<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN> <SPAN class="co1">-- ranges from -127 to 128. </SPAN>
&nbsp;</PRE>
<P>
Returns the current analog stick position in x direction.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">Number controls:analogY<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN> <SPAN class="co1">-- same </SPAN>
&nbsp;</PRE>
<P>
Returns the current analog stick position in y direction.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">Bool <SPAN class="br0">(</SPAN>Controls a == Controls b<SPAN class="br0">)</SPAN> <SPAN class="co1">-- note! The analog stick is NOT considered when comparing because of analog fluctuations. </SPAN>
&nbsp;</PRE>
<P>
Compares two pad states.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">Number controls:buttons<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN> <SPAN class="co1">-- returns the bitmask like sceCtrlReadBufferPositive reads it </SPAN>
&nbsp;</PRE>
<P>
Constants for binary operations on buttons() result (for example “Controls.read():buttons() &amp; Controls.startMask &gt; 0” is the same as “Controls.read():start()”)
</P>
<PRE class="code">Number Controls.selectMask
Number Controls.startMask
Number Controls.upMask
Number Controls.rightMask
Number Controls.downMask
Number Controls.leftMask
Number Controls.ltriggerMask
Number Controls.rtriggerMask
Number Controls.triangleMask
Number Controls.circleMask
Number Controls.crossMask
Number Controls.squareMask
Number Controls.homeMask
Number Controls.holdMask
Number Controls.noteMask</PRE><HR noshade="noshade" size="1">

</DIV>

<A name="millisecond_timer"></A><H2> Millisecond Timer </H2>
<DIV class="level2">
<PRE class="code">Timer Timer.new<SPAN class="br0">(</SPAN><SPAN class="br0">[</SPAN>startTime<SPAN class="br0">]</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
 Creates a new Timer object, sets to 0 or startTime in milliseconds, if specified BUT don’t start ticking as yet.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">Number Timer:start<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Starts to tick the timer (incrementing by one every millisecond), or resumes to tick after being stopped. Returns the current time() value. If the timer is running, it is the same as time().
</P>
<HR noshade="noshade" size="1">
<PRE class="code">Number Timer:<SPAN class="kw1">time</SPAN><SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Returns in milliseconds since the timer started/resumed.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">Number Timer:stop<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Stops the timer. Returns the current time(). Subsequent time() calls returns the value when stopped. If the timer is stopped, this call is the same as time().
</P>
<HR noshade="noshade" size="1">
<PRE class="code">Number Timer:reset<SPAN class="br0">(</SPAN><SPAN class="br0">[</SPAN>startTime<SPAN class="br0">]</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Resets the timer to 0 by default or startTime in milliseconds and holds the timer. Returns the time before resetted to the new value. 
</P>
<HR noshade="noshade" size="1">

</DIV>

<A name="system"></A><H2> System </H2>
<DIV class="level2">
<PRE class="code">String System.currentDirectory<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN> <SPAN class="co1">-- get </SPAN>
&nbsp;</PRE>
<P>
Gets the current working directory.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">String System.currentDirectory<SPAN class="br0">(</SPAN> path <SPAN class="br0">)</SPAN> <SPAN class="co1">-- set, returns old path. </SPAN>
&nbsp;</PRE>
<P>
Sets the current working directory.
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">table</SPAN> System.listDirectory<SPAN class="br0">(</SPAN> <SPAN class="br0">[</SPAN>path<SPAN class="br0">]</SPAN> <SPAN class="br0">)</SPAN></PRE>
<P>
Lists the contents of the current working directory or the specified path. The result is a table of tables, where each table-entry has the string entry “name”, the number entry “size” and the boolean entry “directory”, which is set to true, when the current entry is a directory. See for example this code to print all files in the current working directory:
</P>
<PRE class="code">files = System.listDirectory<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN>
			
<SPAN class="kw1">for</SPAN> index, file <SPAN class="kw1">in</SPAN> files <SPAN class="kw1">do</SPAN>
	<SPAN class="kw1">print</SPAN><SPAN class="br0">(</SPAN>file.name<SPAN class="br0">)</SPAN>
<SPAN class="kw1">end</SPAN></PRE><HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> System.createDirectory<SPAN class="br0">(</SPAN>path<SPAN class="br0">)</SPAN></PRE>
<P>
Creates a new directory. The path is relative to the current directory, if not absolute.
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> System.removeDirectory<SPAN class="br0">(</SPAN>path<SPAN class="br0">)</SPAN></PRE>
<P>
Deletes a directory. The path is relative to the current directory, if not absolute.
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> System.rename<SPAN class="br0">(</SPAN>oldName, newName<SPAN class="br0">)</SPAN></PRE>
<P>
Renames files and directories. The path is relative to the current directory, if not absolute.
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> System.removeFile<SPAN class="br0">(</SPAN>path<SPAN class="br0">)</SPAN></PRE>
<P>
Deletes a file. The path is relative to the current directory, if not absolute.
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> System.usbDiskModeActivate<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Activates the USB mode. Attention: When writing from USB to the memory stick, you must not write from within your Lua script to the memory stick, until you disable USB, otherwise the filesystem of your memory stick gets corrupted and you have to reformat your memmory stick.
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> System.usbDiskModeDeactivate<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Deactivates the USB mode.
</P>
<HR noshade="noshade" size="1">

<P>
 Battery <SPAN class="search_hit">function</SPAN>s:
</P>
<PRE class="code">Bool System.powerIsPowerOnline<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">
<PRE class="code">Bool System.powerIsBatteryExist<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">
<PRE class="code">Bool System.powerIsBatteryCharging<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">
<PRE class="code">Number System.powerGetBatteryChargingStatus<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">
<PRE class="code">Bool System.powerIsLowBattery<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">
<PRE class="code">Number System.powerGetBatteryLifePercent<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">
<PRE class="code">Number System.powerGetBatteryLifeTime<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">
<PRE class="code">Number System.powerGetBatteryTemp<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">
<PRE class="code">Number System.powerGetBatteryVolt<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">
<PRE class="code">Number System.powerTick<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
When called, it resets the internal power off counter, which prevents auto power off.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">String System.md5sum<SPAN class="br0">(</SPAN>String<SPAN class="br0">)</SPAN></PRE>
<P>
Calculates the md5sum of a string. For example print(System.md5sum(io.input(”EBOOT.PBP”):read(”*a”))) prints the same digest as “md5sum EBOOT.PBP” on Unix.
</P>
<HR noshade="noshade" size="1">

<P>
 Serial input/output <SPAN class="search_hit">function</SPAN>s:
</P>
<PRE class="code"><SPAN class="kw1">nil</SPAN> System.sioInit<SPAN class="br0">(</SPAN>baudrate<SPAN class="br0">)</SPAN></PRE>
<P>
Opens the SIO device and sets the baud rate. This needs some seconds to power up the UART.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">System.sioWrite<SPAN class="br0">(</SPAN><SPAN class="kw1">string</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Writes the string to the SIO
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">string</SPAN> System.sioRead<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Reads all available data from the SIO. Returns an empty string, if no data was received.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">System.sleep<SPAN class="br0">(</SPAN>number<SPAN class="br0">)</SPAN></PRE>
<P>
Pauses program execution for the specified time in milliseconds. It doesn’t affect any timer object.
</P>
<HR noshade="noshade" size="1">

<P>
 IrDA <SPAN class="search_hit">function</SPAN>s:
</P>
<PRE class="code"><SPAN class="kw1">nil</SPAN> System.irdaInit<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Opens the IrDA device. Call this to start the IrDA module.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">System.irdaWrite<SPAN class="br0">(</SPAN><SPAN class="kw1">string</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Writes the string to the IrDA port.
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">string</SPAN> System.irdaRead<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Reads all available data from the IrDA port. Returns an empty string, if no data was received.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">number System.getFreeMemory<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Gets the available free memory. You can use it like this: 
</P>
<PRE class="code"><SPAN class="kw1">print</SPAN><SPAN class="br0">(</SPAN><SPAN class="st0">"about "</SPAN> .. System.getFreeMemory<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN> / <SPAN class="nu0">1024</SPAN> / <SPAN class="nu0">1024</SPAN> .. <SPAN class="st0">" megabytes free memory available"</SPAN><SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">

</DIV>

<A name="sound_and_music"></A><H2> Sound and music </H2>
<DIV class="level2">
<PRE class="code"><SPAN class="kw1">nil</SPAN> Music.playFile<SPAN class="br0">(</SPAN> <SPAN class="kw1">string</SPAN> file, bool loop <SPAN class="br0">)</SPAN></PRE>
<P>
Plays a music in one of the following formats: UNI, IT, XM, S3M, MOD, MTM, STM, DSM, MED, FAR, ULT or 669.
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> Music.pause<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> Music.resume<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> Music.stop<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">
<PRE class="code">bool Music.playing<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">
<PRE class="code">Number Music.volume<SPAN class="br0">(</SPAN> <SPAN class="br0">[</SPAN>number <SPAN class="br0">{</SPAN><SPAN class="nu0">0</SPAN>-<SPAN class="nu0">128</SPAN><SPAN class="br0">}</SPAN><SPAN class="br0">]</SPAN> <SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> SoundSystem.SFXVolume<SPAN class="br0">(</SPAN> number <SPAN class="br0">{</SPAN><SPAN class="nu0">0</SPAN>-<SPAN class="nu0">128</SPAN><SPAN class="br0">}</SPAN> <SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> SoundSystem.reverb<SPAN class="br0">(</SPAN> number <SPAN class="br0">{</SPAN><SPAN class="nu0">0</SPAN>-<SPAN class="nu0">15</SPAN><SPAN class="br0">}</SPAN> <SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> SoundSystem.panoramicSeparation<SPAN class="br0">(</SPAN> number <SPAN class="br0">{</SPAN><SPAN class="nu0">0</SPAN>-<SPAN class="nu0">128</SPAN><SPAN class="br0">}</SPAN> <SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">
<PRE class="code">Sound Sound.load<SPAN class="br0">(</SPAN>filename, <SPAN class="br0">[</SPAN>bool loop<SPAN class="br0">]</SPAN><SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">
<PRE class="code">Voice sound:play<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> voice:stop<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> voice:resume<SPAN class="br0">(</SPAN>Sound<SPAN class="br0">)</SPAN> <SPAN class="co1">-- DISABLED due to bug. </SPAN>
&nbsp;</PRE><HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> voice:volume<SPAN class="br0">(</SPAN> number <SPAN class="br0">[</SPAN><SPAN class="nu0">0</SPAN>-<SPAN class="nu0">255</SPAN><SPAN class="br0">]</SPAN> <SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> voice:pan<SPAN class="br0">(</SPAN> number <SPAN class="br0">[</SPAN><SPAN class="nu0">0</SPAN>-<SPAN class="nu0">255</SPAN><SPAN class="br0">]</SPAN> <SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> voice:frequency<SPAN class="br0">(</SPAN> number <SPAN class="br0">[</SPAN><SPAN class="nu0">1</SPAN>-<SPAN class="nu0">80000</SPAN><SPAN class="br0">]</SPAN> <SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">
<PRE class="code">bool voice:playing<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE><HR noshade="noshade" size="1">

</DIV>

<A name="wlan"></A><H2> WLAN </H2>
<DIV class="level2">
<PRE class="code">Wlan.init<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Must be called once at program start to initialize the WLAN module.
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> Wlan.term<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Unloads the WLAN module.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">array Wlan.getConnectionConfigs<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Gets the available WiFi connection configurations.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">Wlan.useConnectionConfig<SPAN class="br0">(</SPAN>number<SPAN class="br0">)</SPAN></PRE>
<P>
Selects the connection configuration. The number is the index in the array that is returned by Wlan.getConnectionConfigs (e.g. use 1 for the first configuration).
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">string</SPAN> Wlan.getIPAddress<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Gets the IP address of the PSP.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">Socket Socket.connect<SPAN class="br0">(</SPAN>host, port<SPAN class="br0">)</SPAN></PRE>
<P>
Creates a new TCP/IP Socket object and starts the connection process to the specified host and port. All sockets are non-blocking.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">bool Socket:isConnected<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Returns true, when the connection is established. Now recv and send can be called on this socket object.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">Socket Socket:createServerSocket<SPAN class="br0">(</SPAN>port<SPAN class="br0">)</SPAN></PRE>
<P>
Creates a server socket, which listens on the specified port for incoming connections.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">Socket Socket:accept<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Can be called for server sockets and returns a new incoming connection socket or nil, if no incoming connection is waiting.
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">string</SPAN> Socket:recv<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Reads and returns all available data from the socket or returns an empty string, if no data is available.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">number Socket:send<SPAN class="br0">(</SPAN><SPAN class="kw1">string</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Sends a string. The result is the number of bytes which was sent (which can be less than the length of the string) or less than 0, if an error occured.
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> Socket:close<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Closes a socket.
</P>
<HR noshade="noshade" size="1">

</DIV>

<A name="netlib_2.0"></A><H2> Netlib 2.0 </H2>
<DIV class="level2">
<PRE class="code">Socket Socket.udpConnect<SPAN class="br0">(</SPAN>host,port<SPAN class="br0">)</SPAN></PRE>
<P>
Creates a new UDP Socket object and starts the connection process to the specified host and port. All sockets are non-blocking.
</P>
<HR noshade="noshade" size="1">
<PRE class="code">number udpSocket:udpSend<SPAN class="br0">(</SPAN><SPAN class="kw1">string</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Sends a string through UDP. The result is the number of bytes which was sent (which can be less than the length of the string) or less than 0, if an error occured.
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> udpSocket:close<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Closes an UDP socket
</P>
<HR noshade="noshade" size="1">
<PRE class="code">String udpSocket:recv<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Reads and returns all available data from the socket or returns an empty string, if no data is available.
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> netconnect<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Connects to the standard netlib UDP server for netlib 2.0 unless modified
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> netclose<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Closes the connection to any UDP socket
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> netsend<SPAN class="br0">(</SPAN>id, data, attribute<SPAN class="br0">)</SPAN></PRE>
<P>
Send the specified data to the ID file on the server using the following attribue (w or a for write or append) using UDP.
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> netget<SPAN class="br0">(</SPAN>id<SPAN class="br0">)</SPAN></PRE>
<P>
Gets the contents of the ID file on the server using UDP.
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> netreg<SPAN class="br0">(</SPAN>id<SPAN class="br0">)</SPAN></PRE>
<P>
Tells the server to resend the info of the ID whenever changed
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> netunreg<SPAN class="br0">(</SPAN>id<SPAN class="br0">)</SPAN></PRE>
<P>
Tells the server to stop sending info to the client, even if it is changed.
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> netrecv<SPAN class="br0">(</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
Recieves data from the server (normally the netlib one) and sorts the data accordingly.
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> netvalue<SPAN class="br0">(</SPAN>id<SPAN class="br0">)</SPAN></PRE>
<P>
Returns the value of the given ID
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> netmail<SPAN class="br0">(</SPAN>to,from,subject,message<SPAN class="br0">)</SPAN></PRE>
<P>
Sends an email to “to” from “from” with the subject of “subject” and the message of “message”
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> netcall<SPAN class="br0">(</SPAN>contact, destination<SPAN class="br0">)</SPAN></PRE>
<P>
Sets up a call between the contact and destination
</P>
<HR noshade="noshade" size="1">
<PRE class="code"><SPAN class="kw1">nil</SPAN> netsms<SPAN class="br0">(</SPAN>to,message,from<SPAN class="br0">)</SPAN></PRE>
<P>
Sends a text message to “to” from “from” with the message of “message”. Alternativly, for certain phones, you can send an email to their phone number at a special website. For Verizon, it is @vtext.com
</P>
<HR noshade="noshade" size="1">

</DIV>

<A name="notes"></A><H2> Notes </H2>
<DIV class="level2">
<UL>
<LI class="level1"><SPAN class="li"> It’s possible to tell mikmod to loop only a part of a sample, or loop backwards, or loop back and forth. Tell nevyn if these attributes are needed.</SPAN>
</LI>
<LI class="level1"><SPAN class="li"> It’s a good idea to ignore low values (perhaps -5&lt;x, y&lt;+5) for the analog stick, as its dead zone is larger than a single integer step.</SPAN>
</LI>
<LI class="level1"><SPAN class="li"> Socket.connect() actually returns two values according to the samples, the first is Socket as above, there is also an error number returned (elaborate on this?)</SPAN>
</LI>
</UL>

<P>
 An example of this would be as follows: 
</P>
<PRE class="code">socket, <SPAN class="kw1">error</SPAN> = Socket.connect<SPAN class="br0">(</SPAN><SPAN class="st0">"www.server.com"</SPAN>, <SPAN class="nu0">80</SPAN><SPAN class="br0">)</SPAN></PRE>
<P>
You could then test the “error” variable to see what the error code is, if any. 
</P>

</DIV>

<!-- cachefile /var/www/psdevWiki/data/pages/_cache/xhtml/bb66ebaf2f913015b729a3e3ceb0568f used -->
    <!-- wikipage stop -->
  </DIV>

  <DIV class="clearer">&nbsp;</DIV>

  
  <DIV class="stylefoot">

    <DIV class="meta">
      <DIV class="user">
              </DIV>
      <DIV class="doc">
        psp/lua_player/functions.txt · Last modified: 2008/05/15 00:07      </DIV>
    </DIV>

   
    <DIV class="bar" id="bar_bottom">
      <DIV class="bar-left" id="bar_bottomleft">
        <FORM class="button" method="post" action="./lua_player_functions_files/lua_player_functions.htm" onsubmit="return svchk()"><INPUT type="hidden" name="do" value="edit"><INPUT type="hidden" name="rev" value=""><INPUT type="submit" value="Show pagesource" class="button" title="ALT+V" accesskey="v"></FORM>        <FORM class="button" method="get" action="./lua_player_functions_files/lua_player_functions.htm" onsubmit="return svchk()"><INPUT type="hidden" name="do" value="revisions"><INPUT type="submit" value="Old revisions" class="button" title="ALT+O" accesskey="o"></FORM>      </DIV>
      <DIV class="bar-right" id="bar_bottomright">
                <FORM class="button" method="get" action="./lua_player_functions_files/lua_player_functions.htm" onsubmit="return svchk()"><INPUT type="hidden" name="do" value="login"><INPUT type="submit" value="Login" class="button"></FORM>        <FORM class="button" method="get" action="./lua_player_functions_files/lua_player_functions.htm" onsubmit="return svchk()"><INPUT type="hidden" name="do" value="index"><INPUT type="submit" value="Index" class="button" title="ALT+X" accesskey="x"></FORM>        <A href="http://wiki.ps2dev.org/psp:lua_player:functions#top"><INPUT type="button" class="button" value="Back to top" onclick="window.scrollTo(0, 0)"></A>&nbsp;
      </DIV>
    </DIV>

  </DIV>

</DIV>

<DIV align="center" class="footerinc">
  <A target="_blank" href="http://wiki.ps2dev.org/feed.php" title="Recent changes RSS feed"><IMG src="./lua_player_functions_files/button-rss.png" width="80" height="15" alt="Recent changes RSS feed" border="0"></A>

  <A target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/2.0/" rel="license" title="Creative Commons License"><IMG src="./lua_player_functions_files/button-cc.gif" width="80" height="15" alt="Creative Commons License" border="0"></A>

  <A target="_blank" href="http://www.php.net/" title="Powered by PHP"><IMG src="./lua_player_functions_files/button-php.gif" width="80" height="15" alt="Powered by PHP" border="0"></A>

  <A target="_blank" href="http://validator.w3.org/check/referer" title="Valid XHTML 1.0"><IMG src="./lua_player_functions_files/button-xhtml.png" width="80" height="15" alt="Valid XHTML 1.0" border="0"></A>

  <A target="_blank" href="http://jigsaw.w3.org/css-validator/check/referer" title="Valid CSS"><IMG src="./lua_player_functions_files/button-css.png" width="80" height="15" alt="Valid CSS" border="0"></A>

  <A target="_blank" href="http://wiki.splitbrain.org/wiki:dokuwiki" title="Driven by DokuWiki"><IMG src="./lua_player_functions_files/button-dw.png" width="80" height="15" alt="Driven by DokuWiki" border="0"></A>



<!--

<rdf:RDF xmlns="http://web.resource.org/cc/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
<Work rdf:about="">
   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
   <license rdf:resource="http://creativecommons.org/licenses/by-nc-sa/2.0/" />
</Work>

<License rdf:about="http://creativecommons.org/licenses/by-nc-sa/2.0/">
   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
   <requires rdf:resource="http://web.resource.org/cc/Notice" />
   <requires rdf:resource="http://web.resource.org/cc/Attribution" />
   <prohibits rdf:resource="http://web.resource.org/cc/CommercialUse" />
   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
   <requires rdf:resource="http://web.resource.org/cc/ShareAlike" />
</License>

</rdf:RDF>

-->
</DIV>


</BODY></HTML>